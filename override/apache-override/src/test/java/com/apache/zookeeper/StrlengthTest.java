package com.apache.zookeeper;

import com.sun.deploy.ui.UIFactory;
import org.apache.zookeeper.KeeperException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import sun.security.util.AuthResources_it;

import java.util.Currency;
import java.util.Random;
import java.util.StringTokenizer;

/**
 * @author Apache-x | A You Ok
 * @version 1.0
 * @date 2021/7/14 17:16
 * @Description
 */
public class StrlengthTest {
    private final static Logger LOG = LoggerFactory.getLogger(StrlengthTest.class);

    public static void main(String[] args) {
        String str = "";
        System.out.println(str.length());
        System.out.println(str.getBytes().length);
        System.out.println("/datasocket/job_opt_msg/precheck/".length());

        // 第一种 确保 {/datasocket/job_opt_msg/precheck/} 地址不会变 固定取
        System.out.println(str.substring(33));


        StringTokenizer tokenizer = new StringTokenizer(str, "/");
        System.out.println(tokenizer.countTokens());
        // 第二种 确保 {/} 分割符不会变
        String[] tempStr = str.split("/");
        System.out.println(tempStr[tempStr.length - 1]);

        String str1 = "/datasocket/job_opt_msg/precheck/{监听目录_finished}";
        System.out.println(str1.contains("finished"));


        while (true) {
            testException(String.valueOf(0));
        }
        // Master 写的数据
        //

        // Worker 回调数据
        //{"msg":"","errCode":0,"status":"success"}

    }

    public static void testException(String str) {
        try {
            if (str.equals("0")) {
                throw new KeeperException.NoNodeException("节点异常");
            }
            if (str.equals("1")) {
                throw new KeeperException.APIErrorException();
            }
            if (str.equals("2")) {
                throw new NullPointerException();
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
